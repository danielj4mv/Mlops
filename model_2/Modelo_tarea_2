{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Taller 1 de MLOPS: Clasificación de especies de pinguinos"],"metadata":{"id":"RzUOWN5zoZaR"}},{"cell_type":"markdown","source":["## Importación de librerías"],"metadata":{"id":"KEPrM2q9owFu"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"42XCHqM8iYbw","executionInfo":{"status":"ok","timestamp":1707176140132,"user_tz":300,"elapsed":4018,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import GridSearchCV\n","import seaborn as sns\n","import xgboost as xgb\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from sklearn.preprocessing import LabelEncoder\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h3M5--aiZO7K","executionInfo":{"status":"ok","timestamp":1707176267376,"user_tz":300,"elapsed":127256,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"0444d48b-681f-4a07-9aaf-51d15924cf96"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["## Preparación de datos"],"metadata":{"id":"g5ch-mo0o2d4"}},{"cell_type":"markdown","source":["###Carga"],"metadata":{"id":"VXvdFqIUpJ1P"}},{"cell_type":"code","source":["ruta=\"/content/drive/My Drive/Mlops_2024_1/tarea_1_30_enero_4_febrero/archivos_tarea/penguins_lter.csv\"\n","df = pd.read_csv(ruta)"],"metadata":{"id":"4QlY9es-pLEE","executionInfo":{"status":"ok","timestamp":1707176268086,"user_tz":300,"elapsed":715,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"GokV0Vo-afij","executionInfo":{"status":"ok","timestamp":1707176268087,"user_tz":300,"elapsed":20,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["### Limpieza"],"metadata":{"id":"aRSoMM6vpmLC"}},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"id":"Wzvpqsnhpn1E","executionInfo":{"status":"ok","timestamp":1707176268087,"user_tz":300,"elapsed":19,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"d8b75fb2-4914-48e3-f647-77cb635c3f46"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  studyName  Sample Number                              Species  Region  \\\n","0   PAL0708              1  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n","1   PAL0708              2  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n","2   PAL0708              3  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n","3   PAL0708              4  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n","4   PAL0708              5  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n","\n","      Island               Stage Individual ID Clutch Completion  Date Egg  \\\n","0  Torgersen  Adult, 1 Egg Stage          N1A1               Yes  11/11/07   \n","1  Torgersen  Adult, 1 Egg Stage          N1A2               Yes  11/11/07   \n","2  Torgersen  Adult, 1 Egg Stage          N2A1               Yes  11/16/07   \n","3  Torgersen  Adult, 1 Egg Stage          N2A2               Yes  11/16/07   \n","4  Torgersen  Adult, 1 Egg Stage          N3A1               Yes  11/16/07   \n","\n","   Culmen Length (mm)  Culmen Depth (mm)  Flipper Length (mm)  Body Mass (g)  \\\n","0                39.1               18.7                181.0         3750.0   \n","1                39.5               17.4                186.0         3800.0   \n","2                40.3               18.0                195.0         3250.0   \n","3                 NaN                NaN                  NaN            NaN   \n","4                36.7               19.3                193.0         3450.0   \n","\n","      Sex  Delta 15 N (o/oo)  Delta 13 C (o/oo)  \\\n","0    MALE                NaN                NaN   \n","1  FEMALE            8.94956          -24.69454   \n","2  FEMALE            8.36821          -25.33302   \n","3     NaN                NaN                NaN   \n","4  FEMALE            8.76651          -25.32426   \n","\n","                         Comments  \n","0  Not enough blood for isotopes.  \n","1                             NaN  \n","2                             NaN  \n","3              Adult not sampled.  \n","4                             NaN  "],"text/html":["\n","  <div id=\"df-dd126fdc-6e1c-43dc-9921-61bef48c8cfa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>studyName</th>\n","      <th>Sample Number</th>\n","      <th>Species</th>\n","      <th>Region</th>\n","      <th>Island</th>\n","      <th>Stage</th>\n","      <th>Individual ID</th>\n","      <th>Clutch Completion</th>\n","      <th>Date Egg</th>\n","      <th>Culmen Length (mm)</th>\n","      <th>Culmen Depth (mm)</th>\n","      <th>Flipper Length (mm)</th>\n","      <th>Body Mass (g)</th>\n","      <th>Sex</th>\n","      <th>Delta 15 N (o/oo)</th>\n","      <th>Delta 13 C (o/oo)</th>\n","      <th>Comments</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>PAL0708</td>\n","      <td>1</td>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N1A1</td>\n","      <td>Yes</td>\n","      <td>11/11/07</td>\n","      <td>39.1</td>\n","      <td>18.7</td>\n","      <td>181.0</td>\n","      <td>3750.0</td>\n","      <td>MALE</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Not enough blood for isotopes.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>PAL0708</td>\n","      <td>2</td>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N1A2</td>\n","      <td>Yes</td>\n","      <td>11/11/07</td>\n","      <td>39.5</td>\n","      <td>17.4</td>\n","      <td>186.0</td>\n","      <td>3800.0</td>\n","      <td>FEMALE</td>\n","      <td>8.94956</td>\n","      <td>-24.69454</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>PAL0708</td>\n","      <td>3</td>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N2A1</td>\n","      <td>Yes</td>\n","      <td>11/16/07</td>\n","      <td>40.3</td>\n","      <td>18.0</td>\n","      <td>195.0</td>\n","      <td>3250.0</td>\n","      <td>FEMALE</td>\n","      <td>8.36821</td>\n","      <td>-25.33302</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>PAL0708</td>\n","      <td>4</td>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N2A2</td>\n","      <td>Yes</td>\n","      <td>11/16/07</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Adult not sampled.</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PAL0708</td>\n","      <td>5</td>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N3A1</td>\n","      <td>Yes</td>\n","      <td>11/16/07</td>\n","      <td>36.7</td>\n","      <td>19.3</td>\n","      <td>193.0</td>\n","      <td>3450.0</td>\n","      <td>FEMALE</td>\n","      <td>8.76651</td>\n","      <td>-25.32426</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd126fdc-6e1c-43dc-9921-61bef48c8cfa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dd126fdc-6e1c-43dc-9921-61bef48c8cfa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dd126fdc-6e1c-43dc-9921-61bef48c8cfa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b8af2174-77d7-4287-a7f4-a3642a9b72a2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8af2174-77d7-4287-a7f4-a3642a9b72a2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b8af2174-77d7-4287-a7f4-a3642a9b72a2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["valores_ausentes_por_columna = df.isna().sum()\n","\n","print(valores_ausentes_por_columna)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GrcBLkUQapvJ","executionInfo":{"status":"ok","timestamp":1707176268087,"user_tz":300,"elapsed":17,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"c399a3b8-33b7-4616-8066-0666216223ee"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["studyName                0\n","Sample Number            0\n","Species                  0\n","Region                   0\n","Island                   0\n","Stage                    0\n","Individual ID            0\n","Clutch Completion        0\n","Date Egg                 0\n","Culmen Length (mm)       2\n","Culmen Depth (mm)        2\n","Flipper Length (mm)      2\n","Body Mass (g)            2\n","Sex                     10\n","Delta 15 N (o/oo)       14\n","Delta 13 C (o/oo)       13\n","Comments               318\n","dtype: int64\n"]}]},{"cell_type":"code","source":["df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q7XwRd-nqKVG","executionInfo":{"status":"ok","timestamp":1707176268087,"user_tz":300,"elapsed":16,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"53a20343-4e10-4b2a-ee1a-5681a2bf8fc4"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.Stage.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p7QGr8-kCKEk","executionInfo":{"status":"ok","timestamp":1707176268088,"user_tz":300,"elapsed":15,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"69ad7112-2a9e-43ff-e47a-85c0d68a72bf"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Adult, 1 Egg Stage    344\n","Name: Stage, dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.Region.value_counts()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"owbbxHVZCNWB","executionInfo":{"status":"ok","timestamp":1707176268088,"user_tz":300,"elapsed":11,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"98733438-3354-479c-dcee-456b9f6a24cd"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Anvers    344\n","Name: Region, dtype: int64"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df.Island.value_counts()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ow0iZ-fgCT-h","executionInfo":{"status":"ok","timestamp":1707176268088,"user_tz":300,"elapsed":9,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"4b91b037-47fa-4cb1-a6fa-aaa1d1b16874"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Biscoe       168\n","Dream        124\n","Torgersen     52\n","Name: Island, dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df[\"Clutch Completion\"].value_counts()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eUt4pxVRCkvA","executionInfo":{"status":"ok","timestamp":1707176268088,"user_tz":300,"elapsed":8,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"263b1bb9-be03-4a6d-876d-7a9e81ec1898"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Yes    308\n","No      36\n","Name: Clutch Completion, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df[\"Sex\"].value_counts()\n","df = df.loc[df[\"Sex\"]!=\".\",:]"],"metadata":{"id":"iG8eJETCIfrY","executionInfo":{"status":"ok","timestamp":1707176268382,"user_tz":300,"elapsed":301,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["del df['Comments']"],"metadata":{"id":"upYp7HVVCZe9","executionInfo":{"status":"ok","timestamp":1707176268382,"user_tz":300,"elapsed":15,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["data_cleaned = df.dropna()\n"],"metadata":{"id":"-39wKB3mCbqK","executionInfo":{"status":"ok","timestamp":1707176268382,"user_tz":300,"elapsed":15,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["### DESCRIPCION DF"],"metadata":{"id":"wkUGx-f3dHn6"}},{"cell_type":"code","source":["data_cleaned.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"akYR5JXjiBbu","executionInfo":{"status":"ok","timestamp":1707176268383,"user_tz":300,"elapsed":16,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"7e69e1ae-c4e7-4048-a82a-04c56b026d45"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['studyName', 'Sample Number', 'Species', 'Region', 'Island', 'Stage',\n","       'Individual ID', 'Clutch Completion', 'Date Egg', 'Culmen Length (mm)',\n","       'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Sex',\n","       'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)'],\n","      dtype='object')"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["data_cleaned = data_cleaned.loc[:,['Species', 'Island',\"Clutch Completion\", 'Culmen Length (mm)',\n","       'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Sex',\n","       'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)' ]]\n","data_cleaned.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"BZLm_wIYcYMY","executionInfo":{"status":"ok","timestamp":1707176268383,"user_tz":300,"elapsed":15,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"617e564e-ba3f-4b74-bb7d-e3b20645299c"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               Species     Island Clutch Completion  \\\n","1  Adelie Penguin (Pygoscelis adeliae)  Torgersen               Yes   \n","2  Adelie Penguin (Pygoscelis adeliae)  Torgersen               Yes   \n","4  Adelie Penguin (Pygoscelis adeliae)  Torgersen               Yes   \n","5  Adelie Penguin (Pygoscelis adeliae)  Torgersen               Yes   \n","6  Adelie Penguin (Pygoscelis adeliae)  Torgersen                No   \n","\n","   Culmen Length (mm)  Culmen Depth (mm)  Flipper Length (mm)  Body Mass (g)  \\\n","1                39.5               17.4                186.0         3800.0   \n","2                40.3               18.0                195.0         3250.0   \n","4                36.7               19.3                193.0         3450.0   \n","5                39.3               20.6                190.0         3650.0   \n","6                38.9               17.8                181.0         3625.0   \n","\n","      Sex  Delta 15 N (o/oo)  Delta 13 C (o/oo)  \n","1  FEMALE            8.94956          -24.69454  \n","2  FEMALE            8.36821          -25.33302  \n","4  FEMALE            8.76651          -25.32426  \n","5    MALE            8.66496          -25.29805  \n","6  FEMALE            9.18718          -25.21799  "],"text/html":["\n","  <div id=\"df-18062002-1ba7-4c46-9e07-70c707c404c2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Species</th>\n","      <th>Island</th>\n","      <th>Clutch Completion</th>\n","      <th>Culmen Length (mm)</th>\n","      <th>Culmen Depth (mm)</th>\n","      <th>Flipper Length (mm)</th>\n","      <th>Body Mass (g)</th>\n","      <th>Sex</th>\n","      <th>Delta 15 N (o/oo)</th>\n","      <th>Delta 13 C (o/oo)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Torgersen</td>\n","      <td>Yes</td>\n","      <td>39.5</td>\n","      <td>17.4</td>\n","      <td>186.0</td>\n","      <td>3800.0</td>\n","      <td>FEMALE</td>\n","      <td>8.94956</td>\n","      <td>-24.69454</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Torgersen</td>\n","      <td>Yes</td>\n","      <td>40.3</td>\n","      <td>18.0</td>\n","      <td>195.0</td>\n","      <td>3250.0</td>\n","      <td>FEMALE</td>\n","      <td>8.36821</td>\n","      <td>-25.33302</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Torgersen</td>\n","      <td>Yes</td>\n","      <td>36.7</td>\n","      <td>19.3</td>\n","      <td>193.0</td>\n","      <td>3450.0</td>\n","      <td>FEMALE</td>\n","      <td>8.76651</td>\n","      <td>-25.32426</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Torgersen</td>\n","      <td>Yes</td>\n","      <td>39.3</td>\n","      <td>20.6</td>\n","      <td>190.0</td>\n","      <td>3650.0</td>\n","      <td>MALE</td>\n","      <td>8.66496</td>\n","      <td>-25.29805</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>Torgersen</td>\n","      <td>No</td>\n","      <td>38.9</td>\n","      <td>17.8</td>\n","      <td>181.0</td>\n","      <td>3625.0</td>\n","      <td>FEMALE</td>\n","      <td>9.18718</td>\n","      <td>-25.21799</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18062002-1ba7-4c46-9e07-70c707c404c2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-18062002-1ba7-4c46-9e07-70c707c404c2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-18062002-1ba7-4c46-9e07-70c707c404c2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5c560886-93e6-4fe1-a10f-70d5414c1bb3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c560886-93e6-4fe1-a10f-70d5414c1bb3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5c560886-93e6-4fe1-a10f-70d5414c1bb3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["data_cleaned[\"Body_Mass_ln\"]= np.where(np.log(data_cleaned['Body Mass (g)'])==np.nan,0,np.log(data_cleaned['Body Mass (g)']))\n","data_cleaned[\"Flipper_Length_ln\"]= np.where(np.log(data_cleaned['Flipper Length (mm)'])==np.nan,0,np.log(data_cleaned['Flipper Length (mm)']))\n"],"metadata":{"id":"hv0ZqTvmdLph","executionInfo":{"status":"ok","timestamp":1707176268383,"user_tz":300,"elapsed":14,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KdGPNzzqHgsN","executionInfo":{"status":"ok","timestamp":1707176268383,"user_tz":300,"elapsed":13,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["data_cleaned.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"YO6JCaP0dLsd","executionInfo":{"status":"ok","timestamp":1707176268383,"user_tz":300,"elapsed":13,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"16283233-2d3c-4d1b-e794-686db2e518af"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Culmen Length (mm)  Culmen Depth (mm)  Flipper Length (mm)  \\\n","count          324.000000         324.000000           324.000000   \n","mean            44.053395          17.127469           201.216049   \n","std              5.480635           1.967385            13.958683   \n","min             32.100000          13.100000           172.000000   \n","25%             39.500000          15.575000           190.000000   \n","50%             44.950000          17.300000           197.000000   \n","75%             48.700000          18.600000           213.000000   \n","max             59.600000          21.500000           231.000000   \n","\n","       Body Mass (g)  Delta 15 N (o/oo)  Delta 13 C (o/oo)  Body_Mass_ln  \\\n","count     324.000000         324.000000         324.000000    324.000000   \n","mean     4213.966049           8.739944         -25.688691      8.328152   \n","std       809.277529           0.552073           0.790840      0.189391   \n","min      2700.000000           7.632200         -27.018540      7.901007   \n","25%      3550.000000           8.304440         -26.326780      8.174703   \n","50%      4050.000000           8.658585         -25.842775      8.306472   \n","75%      4800.000000           9.181477         -25.055572      8.476371   \n","max      6300.000000          10.025440         -23.890170      8.748305   \n","\n","       Flipper_Length_ln  \n","count         324.000000  \n","mean            5.302007  \n","std             0.068800  \n","min             5.147494  \n","25%             5.247024  \n","50%             5.283204  \n","75%             5.361292  \n","max             5.442418  "],"text/html":["\n","  <div id=\"df-35123619-ca63-496c-ac8c-9e1143109fba\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Culmen Length (mm)</th>\n","      <th>Culmen Depth (mm)</th>\n","      <th>Flipper Length (mm)</th>\n","      <th>Body Mass (g)</th>\n","      <th>Delta 15 N (o/oo)</th>\n","      <th>Delta 13 C (o/oo)</th>\n","      <th>Body_Mass_ln</th>\n","      <th>Flipper_Length_ln</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>44.053395</td>\n","      <td>17.127469</td>\n","      <td>201.216049</td>\n","      <td>4213.966049</td>\n","      <td>8.739944</td>\n","      <td>-25.688691</td>\n","      <td>8.328152</td>\n","      <td>5.302007</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.480635</td>\n","      <td>1.967385</td>\n","      <td>13.958683</td>\n","      <td>809.277529</td>\n","      <td>0.552073</td>\n","      <td>0.790840</td>\n","      <td>0.189391</td>\n","      <td>0.068800</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>32.100000</td>\n","      <td>13.100000</td>\n","      <td>172.000000</td>\n","      <td>2700.000000</td>\n","      <td>7.632200</td>\n","      <td>-27.018540</td>\n","      <td>7.901007</td>\n","      <td>5.147494</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>39.500000</td>\n","      <td>15.575000</td>\n","      <td>190.000000</td>\n","      <td>3550.000000</td>\n","      <td>8.304440</td>\n","      <td>-26.326780</td>\n","      <td>8.174703</td>\n","      <td>5.247024</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>44.950000</td>\n","      <td>17.300000</td>\n","      <td>197.000000</td>\n","      <td>4050.000000</td>\n","      <td>8.658585</td>\n","      <td>-25.842775</td>\n","      <td>8.306472</td>\n","      <td>5.283204</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>48.700000</td>\n","      <td>18.600000</td>\n","      <td>213.000000</td>\n","      <td>4800.000000</td>\n","      <td>9.181477</td>\n","      <td>-25.055572</td>\n","      <td>8.476371</td>\n","      <td>5.361292</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>59.600000</td>\n","      <td>21.500000</td>\n","      <td>231.000000</td>\n","      <td>6300.000000</td>\n","      <td>10.025440</td>\n","      <td>-23.890170</td>\n","      <td>8.748305</td>\n","      <td>5.442418</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35123619-ca63-496c-ac8c-9e1143109fba')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-35123619-ca63-496c-ac8c-9e1143109fba button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-35123619-ca63-496c-ac8c-9e1143109fba');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6e9da2c7-bf98-4b2c-a10d-a692f38ed02a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e9da2c7-bf98-4b2c-a10d-a692f38ed02a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6e9da2c7-bf98-4b2c-a10d-a692f38ed02a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":[],"metadata":{"id":"QB7ZkkxW9kac","executionInfo":{"status":"ok","timestamp":1707176268383,"user_tz":300,"elapsed":12,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["labels,counts=np.unique(data_cleaned.Species,return_counts=True)\n","plt.pie(counts,autopct='%1.1f%%',labels=labels)\n","plt.title('Proporción de especies de pinguinos');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"2yf9Xg-zqdZe","executionInfo":{"status":"ok","timestamp":1707176268796,"user_tz":300,"elapsed":424,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"4234f03b-126a-4a5a-f4cf-a17cf0a476b0"},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data_cleaned.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"74igMGRCsibQ","executionInfo":{"status":"ok","timestamp":1707176269056,"user_tz":300,"elapsed":265,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"474cbbee-e533-4f21-cddd-f0acb65728d6"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Species', 'Island', 'Clutch Completion', 'Culmen Length (mm)',\n","       'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Sex',\n","       'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)', 'Body_Mass_ln',\n","       'Flipper_Length_ln'],\n","      dtype='object')"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":[],"metadata":{"id":"ufZF6eut-Aog","executionInfo":{"status":"ok","timestamp":1707176269056,"user_tz":300,"elapsed":17,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["#### Se eliminan las variables que no aportan informacion o tienen muchos valores NA."],"metadata":{"id":"HzMyiNgw3kE0"}},{"cell_type":"code","source":["data_model=data_cleaned.loc[:,['Species', 'Island', 'Clutch Completion',\n","       'Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex', 'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)',\n","       'Body_Mass_ln', 'Flipper_Length_ln']]"],"metadata":{"id":"3U4otGZvsVUQ","executionInfo":{"status":"ok","timestamp":1707176269056,"user_tz":300,"elapsed":15,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["col_one_hot = ['Island',\"Clutch Completion\",'Sex']\n","data_encoded = pd.get_dummies(data_model, columns=col_one_hot)\n","\n"],"metadata":{"id":"38lfpctWGaKf","executionInfo":{"status":"ok","timestamp":1707176269056,"user_tz":300,"elapsed":14,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Crear una instancia de LabelEncoder\n","label_encoder = LabelEncoder()\n","\n","# Aplicar el mapeo a la columna \"Species\"\n","data_encoded['Species_encode'] = label_encoder.fit_transform(data_encoded['Species'])"],"metadata":{"id":"JykD2hi_GcYV","executionInfo":{"status":"ok","timestamp":1707176269056,"user_tz":300,"elapsed":13,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["data_encoded.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"Ft8bvTp7GcdC","executionInfo":{"status":"ok","timestamp":1707176269057,"user_tz":300,"elapsed":14,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"91c5637e-9a1e-47b7-8ad6-5c2812b51be5"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               Species  Culmen Length (mm)  Culmen Depth (mm)  \\\n","1  Adelie Penguin (Pygoscelis adeliae)                39.5               17.4   \n","2  Adelie Penguin (Pygoscelis adeliae)                40.3               18.0   \n","4  Adelie Penguin (Pygoscelis adeliae)                36.7               19.3   \n","5  Adelie Penguin (Pygoscelis adeliae)                39.3               20.6   \n","6  Adelie Penguin (Pygoscelis adeliae)                38.9               17.8   \n","\n","   Delta 15 N (o/oo)  Delta 13 C (o/oo)  Body_Mass_ln  Flipper_Length_ln  \\\n","1            8.94956          -24.69454      8.242756           5.225747   \n","2            8.36821          -25.33302      8.086410           5.273000   \n","4            8.76651          -25.32426      8.146130           5.262690   \n","5            8.66496          -25.29805      8.202482           5.247024   \n","6            9.18718          -25.21799      8.195610           5.198497   \n","\n","   Island_Biscoe  Island_Dream  Island_Torgersen  Clutch Completion_No  \\\n","1              0             0                 1                     0   \n","2              0             0                 1                     0   \n","4              0             0                 1                     0   \n","5              0             0                 1                     0   \n","6              0             0                 1                     1   \n","\n","   Clutch Completion_Yes  Sex_FEMALE  Sex_MALE  Species_encode  \n","1                      1           1         0               0  \n","2                      1           1         0               0  \n","4                      1           1         0               0  \n","5                      1           0         1               0  \n","6                      0           1         0               0  "],"text/html":["\n","  <div id=\"df-22555317-76df-4132-a8e2-6b855987377a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Species</th>\n","      <th>Culmen Length (mm)</th>\n","      <th>Culmen Depth (mm)</th>\n","      <th>Delta 15 N (o/oo)</th>\n","      <th>Delta 13 C (o/oo)</th>\n","      <th>Body_Mass_ln</th>\n","      <th>Flipper_Length_ln</th>\n","      <th>Island_Biscoe</th>\n","      <th>Island_Dream</th>\n","      <th>Island_Torgersen</th>\n","      <th>Clutch Completion_No</th>\n","      <th>Clutch Completion_Yes</th>\n","      <th>Sex_FEMALE</th>\n","      <th>Sex_MALE</th>\n","      <th>Species_encode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>39.5</td>\n","      <td>17.4</td>\n","      <td>8.94956</td>\n","      <td>-24.69454</td>\n","      <td>8.242756</td>\n","      <td>5.225747</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>40.3</td>\n","      <td>18.0</td>\n","      <td>8.36821</td>\n","      <td>-25.33302</td>\n","      <td>8.086410</td>\n","      <td>5.273000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>36.7</td>\n","      <td>19.3</td>\n","      <td>8.76651</td>\n","      <td>-25.32426</td>\n","      <td>8.146130</td>\n","      <td>5.262690</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>39.3</td>\n","      <td>20.6</td>\n","      <td>8.66496</td>\n","      <td>-25.29805</td>\n","      <td>8.202482</td>\n","      <td>5.247024</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n","      <td>38.9</td>\n","      <td>17.8</td>\n","      <td>9.18718</td>\n","      <td>-25.21799</td>\n","      <td>8.195610</td>\n","      <td>5.198497</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22555317-76df-4132-a8e2-6b855987377a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-22555317-76df-4132-a8e2-6b855987377a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-22555317-76df-4132-a8e2-6b855987377a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-940ccb44-8fe9-4712-a2dc-8c7efec1a119\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-940ccb44-8fe9-4712-a2dc-8c7efec1a119')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-940ccb44-8fe9-4712-a2dc-8c7efec1a119 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["##*División* de predictores y etiqueta"],"metadata":{"id":"j6tC3k3i5Y7d"}},{"cell_type":"code","source":["y=data_encoded['Species_encode']\n","X=data_encoded.drop(['Species',\"Species_encode\"],axis=1)"],"metadata":{"id":"KgG4-h865XIp","executionInfo":{"status":"ok","timestamp":1707176269057,"user_tz":300,"elapsed":12,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"irv7F1u896Ry","executionInfo":{"status":"ok","timestamp":1707176269057,"user_tz":300,"elapsed":12,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["### Creacion del modelo:"],"metadata":{"id":"UYY7BSYvEZAI"}},{"cell_type":"code","source":["# Separación de los grupos de entrenamiento y prueba (30% para prueba)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n"],"metadata":{"id":"tLqIziMj-h1o","executionInfo":{"status":"ok","timestamp":1707176269058,"user_tz":300,"elapsed":12,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["model = xgb.XGBClassifier(n_estimators=100, max_depth=3, learning_rate=0.1, random_state=42)\n","model.fit(X_train, y_train)"],"metadata":{"id":"bjJLu3TbEeQh","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1707176269059,"user_tz":300,"elapsed":13,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"c8726a65-c046-49b3-e146-cafee5c9eee0"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=3, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=100, n_jobs=None,\n","              num_parallel_tree=None, objective='multi:softprob', ...)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=3, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=100, n_jobs=None,\n","              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=3, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=100, n_jobs=None,\n","              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n"],"metadata":{"id":"S_954FxHEqWf","executionInfo":{"status":"ok","timestamp":1707176269356,"user_tz":300,"elapsed":308,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["accuracy = accuracy_score(y_test, y_pred)\n","print(f'Accuracy: {accuracy}')\n","\n","print(classification_report(y_test, y_pred))\n","print(confusion_matrix(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XmRgGxG1JlYi","executionInfo":{"status":"ok","timestamp":1707176269356,"user_tz":300,"elapsed":307,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"5b1e9e6f-5f1f-4249-fad3-a0025155aefd"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9846153846153847\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.96      0.98        25\n","           1       0.95      1.00      0.98        20\n","           2       1.00      1.00      1.00        20\n","\n","    accuracy                           0.98        65\n","   macro avg       0.98      0.99      0.99        65\n","weighted avg       0.99      0.98      0.98        65\n","\n","[[24  1  0]\n"," [ 0 20  0]\n"," [ 0  0 20]]\n"]}]},{"cell_type":"code","source":["\n","cross_table = pd.crosstab(data_encoded['Species'], data_encoded['Species_encode'])\n","\n","# Imprimir la tabla de contingencia cruzada\n","print(cross_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3kMsTgUSPydK","executionInfo":{"status":"ok","timestamp":1707176269356,"user_tz":300,"elapsed":8,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"ca002e7f-49e2-491c-8f3d-34aebf1e6f92"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Species_encode                               0   1    2\n","Species                                                \n","Adelie Penguin (Pygoscelis adeliae)        139   0    0\n","Chinstrap penguin (Pygoscelis antarctica)    0  67    0\n","Gentoo penguin (Pygoscelis papua)            0   0  118\n"]}]},{"cell_type":"markdown","source":["\n","\n","*   Adelie Penguin (Pygoscelis adeliae)  : 0\n","*   Chinstrap penguin (Pygoscelis antarctica) : 1\n","*   Gentoo penguin (Pygoscelis papua)  : 2\n","\n"],"metadata":{"id":"dJFdl-X0QDVd"}},{"cell_type":"markdown","source":["# Exportar transformaciones y modelo"],"metadata":{"id":"mJMIIzD1gebn"}},{"cell_type":"code","source":["from pickle import dump, load"],"metadata":{"id":"eU6JDvL7geLf","executionInfo":{"status":"ok","timestamp":1707176269356,"user_tz":300,"elapsed":6,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# save the model\n","dump(model, open('model_xgboost.pkl', 'wb'))\n","# save the scaler\n","#dump(scaler, open('scaler.pkl', 'wb'))"],"metadata":{"id":"ICZBn-EugoPz","executionInfo":{"status":"ok","timestamp":1707176367048,"user_tz":300,"elapsed":205,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["# Código de implementación del modelo\n","Acá va el código donde se realiza todo el proceso desde la ingesta de datos hasta la entrega de la prediccción"],"metadata":{"id":"jqaEZrYO0k-V"}},{"cell_type":"markdown","source":["## Datos de Ejemplo"],"metadata":{"id":"sC5IXPX71K-p"}},{"cell_type":"code","source":[],"metadata":{"id":"lCRk9DuWRpWI","executionInfo":{"status":"ok","timestamp":1707176269357,"user_tz":300,"elapsed":7,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["ejemplo=\"\"\"[{\"studyName\":\"PAL0708\",\"Sample Number\":1,\"Region\":\"Anvers\",\"Island\":\"Torgersen\",\"Stage\":\"Adult, 1 Egg Stage\",\"Individual ID\":\"N1A1\",\"Clutch Completion\":\"Yes\",\"Date Egg\":\"11/11/07\",\"Culmen Length (mm)\":39.1,\"Culmen Depth (mm)\":18.7,\"Flipper Length (mm)\":181.0,\"Body Mass (g)\":3750.0,\"Sex\":\"MALE\",\"Delta 15 N (o/oo)\":null,\"Delta 13 C (o/oo)\":null,\"Comments\":\"Not enough blood for isotopes.\"},{\"studyName\":\"PAL0708\",\"Sample Number\":2,\"Region\":\"Anvers\",\"Island\":\"Torgersen\",\"Stage\":\"Adult, 1 Egg Stage\",\"Individual ID\":\"N1A2\",\"Clutch Completion\":\"Yes\",\"Date Egg\":\"11\\/11\\/07\",\"Culmen Length (mm)\":39.5,\"Culmen Depth (mm)\":17.4,\"Flipper Length (mm)\":186.0,\"Body Mass (g)\":3800.0,\"Sex\":\"FEMALE\",\"Delta 15 N (o\\/oo)\":8.94956,\"Delta 13 C (o\\/oo)\":-24.69454,\"Comments\":null},{\"studyName\":\"PAL0708\",\"Sample Number\":3,\"Region\":\"Anvers\",\"Island\":\"Torgersen\",\"Stage\":\"Adult, 1 Egg Stage\",\"Individual ID\":\"N2A1\",\"Clutch Completion\":\"Yes\",\"Date Egg\":\"11\\/16\\/07\",\"Culmen Length (mm)\":40.3,\"Culmen Depth (mm)\":18.0,\"Flipper Length (mm)\":195.0,\"Body Mass (g)\":3250.0,\"Sex\":\"FEMALE\",\"Delta 15 N (o\\/oo)\":8.36821,\"Delta 13 C (o\\/oo)\":-25.33302,\"Comments\":null},{\"studyName\":\"PAL0708\",\"Sample Number\":5,\"Region\":\"Anvers\",\"Island\":\"Torgersen\",\"Stage\":\"Adult, 1 Egg Stage\",\"Individual ID\":\"N3A1\",\"Clutch Completion\":\"Yes\",\"Date Egg\":\"11\\/16\\/07\",\"Culmen Length (mm)\":36.7,\"Culmen Depth (mm)\":19.3,\"Flipper Length (mm)\":193.0,\"Body Mass (g)\":3450.0,\"Sex\":\"FEMALE\",\"Delta 15 N (o\\/oo)\":8.76651,\"Delta 13 C (o\\/oo)\":-25.32426,\"Comments\":null},{\"studyName\":\"PAL0708\",\"Sample Number\":6,\"Region\":\"Anvers\",\"Island\":\"Torgersen\",\"Stage\":\"Adult, 1 Egg Stage\",\"Individual ID\":\"N3A2\",\"Clutch Completion\":\"Yes\",\"Date Egg\":\"11\\/16\\/07\",\"Culmen Length (mm)\":39.3,\"Culmen Depth (mm)\":20.6,\"Flipper Length (mm)\":190.0,\"Body Mass (g)\":3650.0,\"Sex\":\"MALE\",\"Delta 15 N (o\\/oo)\":8.66496,\"Delta 13 C (o\\/oo)\":-25.29805,\"Comments\":null}]\"\"\"\n","df_ejemplo=pd.read_json(ejemplo)"],"metadata":{"id":"d3MkelG_1SDq","executionInfo":{"status":"ok","timestamp":1707176269357,"user_tz":300,"elapsed":6,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LZb0YURqT_yj","executionInfo":{"status":"ok","timestamp":1707176269357,"user_tz":300,"elapsed":6,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["\n","df_ejemplo.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R1ktJtZKW7uU","executionInfo":{"status":"ok","timestamp":1707176269357,"user_tz":300,"elapsed":6,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"6e542670-ba48-47fe-ae86-7c026dea3c99"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['studyName', 'Sample Number', 'Region', 'Island', 'Stage',\n","       'Individual ID', 'Clutch Completion', 'Date Egg', 'Culmen Length (mm)',\n","       'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Sex',\n","       'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)', 'Comments'],\n","      dtype='object')"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":[],"metadata":{"id":"Ufwis5ndUYDx","executionInfo":{"status":"ok","timestamp":1707176269588,"user_tz":300,"elapsed":235,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["## Código con proceso de predicción"],"metadata":{"id":"EeSf1Vp5Dq52"}},{"cell_type":"code","source":[],"metadata":{"id":"yGxRG-sSYdoY","executionInfo":{"status":"ok","timestamp":1707176269588,"user_tz":300,"elapsed":10,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","Definir en este bloque el código correspondiente al proceso de pasar de\n","DataFrame a resultados y encapsularlo en una clase\n","\"\"\"\n","\n","# Librerias importadas\n","from pickle import load\n","import pandas as pd\n","import numpy as np\n","\n","class Clasificador():\n","    # Constructor de la clase que acepta un DataFrame como argumento\n","    def __init__(self, new_data: pd.DataFrame):\n","        self.model = load(open('model_xgboost.pkl', 'rb'))  # Modelo Importado\n","        self.columnas = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 15 N (o/oo)',\n","                         'Delta 13 C (o/oo)', 'Flipper Length (mm)', 'Body Mass (g)', 'Clutch Completion', 'Sex', 'Island']\n","        self.new_data = new_data  # Almacena el nuevo DataFrame\n","\n","    def one_hot_function(self,data, column_name,target_categories = ['A', 'B', 'C', 'D']):\n","\n","    # Crear un DataFrame con las columnas dummy\n","       dummy_columns = pd.DataFrame(index=data.index)\n","       for category in target_categories:\n","            dummy_column_name = f\"{column_name}_{category}\"\n","        # Codificación para cada categoría\n","            dummy_columns[dummy_column_name] = (data[column_name] == category).astype(int)\n","\n","    # Concatenar las columnas dummy al DataFrame original\n","       data_encoded = pd.concat([data, dummy_columns], axis=1)\n","       del(data_encoded[column_name])\n","       return(data_encoded)\n","\n","    def preproc(self):\n","        # Procesamiento de los datos utilizando el DataFrame almacenado\n","\n","        df = self.new_data.loc[:, self.columnas]\n","        df[\"Body_Mass_ln\"] = np.where(np.log(df['Body Mass (g)']) == np.nan, 0, np.log(df['Body Mass (g)']))\n","        df[\"Flipper_Length_ln\"] = np.where(np.log(df['Flipper Length (mm)']) == np.nan, 0, np.log(df['Flipper Length (mm)']))\n","        col_one_hot = ['Island', \"Clutch Completion\", 'Sex']\n","        df = df.dropna()\n","\n","\n","        dfa_1 = self.one_hot_function(df.loc[:,[\"Sex\"]],\"Sex\", [\"MALE\",\"FEMALE\"])\n","        dfa_2 = self.one_hot_function(df.loc[:,[\"Clutch Completion\"]],\"Clutch Completion\", [\"Yes\",\"No\"])\n","        dfa_3 = self.one_hot_function(df.loc[:,[\"Island\"]],\"Island\", [\"Biscoe\",\"Torgersen\",\"Dream\"])\n","        df_concatenado = pd.concat([df,dfa_1, dfa_2, dfa_3], axis=1)\n","        df_final = df_concatenado.loc[:,['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 15 N (o/oo)',\n","       'Delta 13 C (o/oo)', 'Body_Mass_ln', 'Flipper_Length_ln',\n","       'Island_Biscoe', 'Island_Dream', 'Island_Torgersen',\n","       'Clutch Completion_No', 'Clutch Completion_Yes', 'Sex_FEMALE',\n","       'Sex_MALE']]\n","        return(df_final)\n","\n","    def predict(self):\n","        \"\"\"\n","        Realiza la predicción utilizando el DataFrame almacenado.\n","        \"\"\"\n","\n","        prediction = self.model.predict(self.preproc())\n","        reemplazos = {0: 'Adelie Penguin (Pygoscelis adeliae)', 1: 'Chinstrap penguin (Pygoscelis antarctica)', 2: 'Gentoo penguin (Pygoscelis papua)'}\n","\n","        # Comprensión de lista para reemplazar los valores\n","        prediction_f = [reemplazos[valor] for valor in prediction]\n","\n","        return list(prediction_f)"],"metadata":{"id":"ZtTgzsQG2sN6","executionInfo":{"status":"ok","timestamp":1707176269588,"user_tz":300,"elapsed":9,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["X.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HlMnRxaD_XTT","executionInfo":{"status":"ok","timestamp":1707176269588,"user_tz":300,"elapsed":9,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"70a9b6d9-aff2-4e00-f069-d0148c63d8cb"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 15 N (o/oo)',\n","       'Delta 13 C (o/oo)', 'Body_Mass_ln', 'Flipper_Length_ln',\n","       'Island_Biscoe', 'Island_Dream', 'Island_Torgersen',\n","       'Clutch Completion_No', 'Clutch Completion_Yes', 'Sex_FEMALE',\n","       'Sex_MALE'],\n","      dtype='object')"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["##  Prueba de funcionamiento de la clase"],"metadata":{"id":"slLEbe6yEPAF"}},{"cell_type":"code","source":["df_ejemplo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"T7FHWDTN9Ll7","executionInfo":{"status":"ok","timestamp":1707176269588,"user_tz":300,"elapsed":8,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"82d7168c-3ce7-4626-83e7-00ea62c04416"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  studyName  Sample Number  Region     Island               Stage  \\\n","0   PAL0708              1  Anvers  Torgersen  Adult, 1 Egg Stage   \n","1   PAL0708              2  Anvers  Torgersen  Adult, 1 Egg Stage   \n","2   PAL0708              3  Anvers  Torgersen  Adult, 1 Egg Stage   \n","3   PAL0708              5  Anvers  Torgersen  Adult, 1 Egg Stage   \n","4   PAL0708              6  Anvers  Torgersen  Adult, 1 Egg Stage   \n","\n","  Individual ID Clutch Completion  Date Egg  Culmen Length (mm)  \\\n","0          N1A1               Yes  11/11/07                39.1   \n","1          N1A2               Yes  11/11/07                39.5   \n","2          N2A1               Yes  11/16/07                40.3   \n","3          N3A1               Yes  11/16/07                36.7   \n","4          N3A2               Yes  11/16/07                39.3   \n","\n","   Culmen Depth (mm)  Flipper Length (mm)  Body Mass (g)     Sex  \\\n","0               18.7                  181           3750    MALE   \n","1               17.4                  186           3800  FEMALE   \n","2               18.0                  195           3250  FEMALE   \n","3               19.3                  193           3450  FEMALE   \n","4               20.6                  190           3650    MALE   \n","\n","   Delta 15 N (o/oo)  Delta 13 C (o/oo)                        Comments  \n","0                NaN                NaN  Not enough blood for isotopes.  \n","1            8.94956          -24.69454                            None  \n","2            8.36821          -25.33302                            None  \n","3            8.76651          -25.32426                            None  \n","4            8.66496          -25.29805                            None  "],"text/html":["\n","  <div id=\"df-bb59d5f6-6310-4e69-912d-3efaad9746fb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>studyName</th>\n","      <th>Sample Number</th>\n","      <th>Region</th>\n","      <th>Island</th>\n","      <th>Stage</th>\n","      <th>Individual ID</th>\n","      <th>Clutch Completion</th>\n","      <th>Date Egg</th>\n","      <th>Culmen Length (mm)</th>\n","      <th>Culmen Depth (mm)</th>\n","      <th>Flipper Length (mm)</th>\n","      <th>Body Mass (g)</th>\n","      <th>Sex</th>\n","      <th>Delta 15 N (o/oo)</th>\n","      <th>Delta 13 C (o/oo)</th>\n","      <th>Comments</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>PAL0708</td>\n","      <td>1</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N1A1</td>\n","      <td>Yes</td>\n","      <td>11/11/07</td>\n","      <td>39.1</td>\n","      <td>18.7</td>\n","      <td>181</td>\n","      <td>3750</td>\n","      <td>MALE</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Not enough blood for isotopes.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>PAL0708</td>\n","      <td>2</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N1A2</td>\n","      <td>Yes</td>\n","      <td>11/11/07</td>\n","      <td>39.5</td>\n","      <td>17.4</td>\n","      <td>186</td>\n","      <td>3800</td>\n","      <td>FEMALE</td>\n","      <td>8.94956</td>\n","      <td>-24.69454</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>PAL0708</td>\n","      <td>3</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N2A1</td>\n","      <td>Yes</td>\n","      <td>11/16/07</td>\n","      <td>40.3</td>\n","      <td>18.0</td>\n","      <td>195</td>\n","      <td>3250</td>\n","      <td>FEMALE</td>\n","      <td>8.36821</td>\n","      <td>-25.33302</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>PAL0708</td>\n","      <td>5</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N3A1</td>\n","      <td>Yes</td>\n","      <td>11/16/07</td>\n","      <td>36.7</td>\n","      <td>19.3</td>\n","      <td>193</td>\n","      <td>3450</td>\n","      <td>FEMALE</td>\n","      <td>8.76651</td>\n","      <td>-25.32426</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PAL0708</td>\n","      <td>6</td>\n","      <td>Anvers</td>\n","      <td>Torgersen</td>\n","      <td>Adult, 1 Egg Stage</td>\n","      <td>N3A2</td>\n","      <td>Yes</td>\n","      <td>11/16/07</td>\n","      <td>39.3</td>\n","      <td>20.6</td>\n","      <td>190</td>\n","      <td>3650</td>\n","      <td>MALE</td>\n","      <td>8.66496</td>\n","      <td>-25.29805</td>\n","      <td>None</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb59d5f6-6310-4e69-912d-3efaad9746fb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bb59d5f6-6310-4e69-912d-3efaad9746fb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bb59d5f6-6310-4e69-912d-3efaad9746fb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2d325583-599d-43d3-85a9-1d2905d771be\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d325583-599d-43d3-85a9-1d2905d771be')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2d325583-599d-43d3-85a9-1d2905d771be button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_deaf81f2-3572-4ade-8986-e797c7adc4cc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_ejemplo')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_deaf81f2-3572-4ade-8986-e797c7adc4cc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_ejemplo');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["Clasificador(df_ejemplo).predict()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QhI1wDNC8b4r","executionInfo":{"status":"ok","timestamp":1707176269588,"user_tz":300,"elapsed":7,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}},"outputId":"fe0efb6a-c75d-4aab-d869-6a17a3293746"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Adelie Penguin (Pygoscelis adeliae)',\n"," 'Adelie Penguin (Pygoscelis adeliae)',\n"," 'Adelie Penguin (Pygoscelis adeliae)',\n"," 'Adelie Penguin (Pygoscelis adeliae)']"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":[],"metadata":{"id":"oQeNbRZKgpfK","executionInfo":{"status":"ok","timestamp":1707176269589,"user_tz":300,"elapsed":6,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# Librerias externas (Opcional)\n","from pickle import load\n","from pandas import DataFrame, concat, get_dummies\n","\n","import os\n","\n","# Paquetes del proyecto (Necesario)\n","from prediction_request import PredictionRequest\n","from utils import transform_to_dataframe\n","\n","# Librerias importadas\n","from pickle import load\n","import pandas as pd\n","import numpy as np\n","\n","\n","# Importacion de modelos y pipelines de procesamiento de datos\n","folder_dir = os.path.dirname(__file__)  # Ruta de la carpeta de este arcivo\n","\n","# importacion del modelo\n","model = load(open(os.path.join(folder_dir, 'model_xgboost.pkl'), 'rb'))\n","# importacion del pipeline\n","scaler = load(open(os.path.join(folder_dir, 'scaler.pkl'), 'rb'))\n","\n","# Columnas usadas en procesamiento (sin importancia)\n","columnas = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 15 N (o/oo)',\n","                         'Delta 13 C (o/oo)', 'Flipper Length (mm)', 'Body Mass (g)', 'Clutch Completion', 'Sex', 'Island']\n","\n","\n","# procesamiento de los datos (Necesario)\n","def preprocessing_data(request: PredictionRequest):\n","\n","    \"\"\"Aplica el pipeline de procesamiento sobre el JSON de la peticion\n","\n","    Args:\n","        request (PredictionRequest): JSON de entrada a la API\n","    \"\"\"\n","\n","    trans_df = transform_to_dataframe(request) # Convierte el json a un DataFrame (Necesario)\n","    # A eleccion propia lo que quieran hacer en el resto de la funcion\n","    df = DataFrame(columns=columnas)\n","    df = concat([df, get_dummies(trans_df)], ignore_index=True)[\n","        columnas].fillna(0)\n","    return scaler.transform(df)\n","\n","\n","\n","class Clasificador():\n","    # Constructor de la clase que acepta un DataFrame como argumento\n","    def __init__(self, new_data: pd.DataFrame):\n","        self.model = load(open('model_xgboost.pkl', 'rb'))  # Modelo Importado\n","        self.columnas = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 15 N (o/oo)',\n","                         'Delta 13 C (o/oo)', 'Flipper Length (mm)', 'Body Mass (g)', 'Clutch Completion', 'Sex', 'Island']\n","        self.new_data = new_data  # Almacena el nuevo DataFrame\n","\n","    def one_hot_function(self,data, column_name,target_categories = ['A', 'B', 'C', 'D']):\n","\n","    # Crear un DataFrame con las columnas dummy\n","       dummy_columns = pd.DataFrame(index=data.index)\n","       for category in target_categories:\n","            dummy_column_name = f\"{column_name}_{category}\"\n","        # Codificación para cada categoría\n","            dummy_columns[dummy_column_name] = (data[column_name] == category).astype(int)\n","\n","    # Concatenar las columnas dummy al DataFrame original\n","       data_encoded = pd.concat([data, dummy_columns], axis=1)\n","       del(data_encoded[column_name])\n","       return(data_encoded)\n","\n","    def preproc(self):\n","        # Procesamiento de los datos utilizando el DataFrame almacenado\n","\n","        df = self.new_data.loc[:, self.columnas]\n","        df[\"Body_Mass_ln\"] = np.where(np.log(df['Body Mass (g)']) == np.nan, 0, np.log(df['Body Mass (g)']))\n","        df[\"Flipper_Length_ln\"] = np.where(np.log(df['Flipper Length (mm)']) == np.nan, 0, np.log(df['Flipper Length (mm)']))\n","        col_one_hot = ['Island', \"Clutch Completion\", 'Sex']\n","        df = df.dropna()\n","\n","\n","        dfa_1 = self.one_hot_function(df.loc[:,[\"Sex\"]],\"Sex\", [\"MALE\",\"FEMALE\"])\n","        dfa_2 = self.one_hot_function(df.loc[:,[\"Clutch Completion\"]],\"Clutch Completion\", [\"Yes\",\"No\"])\n","        dfa_3 = self.one_hot_function(df.loc[:,[\"Island\"]],\"Island\", [\"Biscoe\",\"Torgersen\",\"Dream\"])\n","        df_concatenado = pd.concat([df,dfa_1, dfa_2, dfa_3], axis=1)\n","        df_final = df_concatenado.loc[:,['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 15 N (o/oo)',\n","       'Delta 13 C (o/oo)', 'Body_Mass_ln', 'Flipper_Length_ln',\n","       'Island_Biscoe', 'Island_Dream', 'Island_Torgersen',\n","       'Clutch Completion_No', 'Clutch Completion_Yes', 'Sex_FEMALE',\n","       'Sex_MALE']]\n","        return(df_final)\n","\n","    def predict(self):\n","        \"\"\"\n","        Realiza la predicción utilizando el DataFrame almacenado.\n","        \"\"\"\n","\n","        prediction = self.model.predict(self.preproc())\n","        reemplazos = {0: 'Adelie Penguin (Pygoscelis adeliae)', 1: 'Chinstrap penguin (Pygoscelis antarctica)', 2: 'Gentoo penguin (Pygoscelis papua)'}\n","\n","        # Comprensión de lista para reemplazar los valores\n","        prediction_f = [reemplazos[valor] for valor in prediction]\n","\n","        return list(prediction_f)\n","\n","\n","\n","\n","\n","\n","# Prediccion (Necesario)\n","def get_prediction(request: PredictionRequest) -> list[str]:\n","\n","    \"\"\"Genera la prediccion a partir de la peticion en formato JSON\n","\n","    Args:\n","        request (PredictionRequest): JSON de entrada a la API\n","\n","    Returns:\n","        list[str]: Lista de strings con las predicciones generadas\n","    \"\"\"\n","\n","    data_to_predict = preprocessing_data(request) # Preprocesamiento (Necesario)\n","    # A eleccion propia lo que quieran hacer en el resto de la funcion\n","    prediction = model.predict(data_to_predict)\n","    return list(prediction) # Debe entregar una lista de strings con las predicciones"],"metadata":{"id":"XZa-zu5zvoX0","executionInfo":{"status":"ok","timestamp":1707176269589,"user_tz":300,"elapsed":6,"user":{"displayName":"Daniel Cordoba","userId":"13140248784767898322"}}},"execution_count":37,"outputs":[]}]}